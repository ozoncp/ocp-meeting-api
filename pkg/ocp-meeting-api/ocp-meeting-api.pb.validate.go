// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/ocp-meeting-api/ocp-meeting-api.proto

package ocp_meeting_api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on Meeting with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Meeting) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for UserId

	// no validation rules for Link

	if v, ok := interface{}(m.GetStart()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MeetingValidationError{
				field:  "Start",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEnd()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MeetingValidationError{
				field:  "End",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// MeetingValidationError is the validation error returned by Meeting.Validate
// if the designated constraints aren't met.
type MeetingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MeetingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MeetingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MeetingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MeetingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MeetingValidationError) ErrorName() string { return "MeetingValidationError" }

// Error satisfies the builtin error interface
func (e MeetingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMeeting.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MeetingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MeetingValidationError{}

// Validate checks the field values on MultiCreateMeetingsV1Request with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MultiCreateMeetingsV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetMeetings()) < 1 {
		return MultiCreateMeetingsV1RequestValidationError{
			field:  "Meetings",
			reason: "value must contain at least 1 item(s)",
		}
	}

	for idx, item := range m.GetMeetings() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MultiCreateMeetingsV1RequestValidationError{
					field:  fmt.Sprintf("Meetings[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// MultiCreateMeetingsV1RequestValidationError is the validation error returned
// by MultiCreateMeetingsV1Request.Validate if the designated constraints
// aren't met.
type MultiCreateMeetingsV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultiCreateMeetingsV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultiCreateMeetingsV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultiCreateMeetingsV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultiCreateMeetingsV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultiCreateMeetingsV1RequestValidationError) ErrorName() string {
	return "MultiCreateMeetingsV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e MultiCreateMeetingsV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultiCreateMeetingsV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultiCreateMeetingsV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultiCreateMeetingsV1RequestValidationError{}

// Validate checks the field values on MultiCreateMeetingsV1Response with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MultiCreateMeetingsV1Response) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetMeetingIds()) < 1 {
		return MultiCreateMeetingsV1ResponseValidationError{
			field:  "MeetingIds",
			reason: "value must contain at least 1 item(s)",
		}
	}

	return nil
}

// MultiCreateMeetingsV1ResponseValidationError is the validation error
// returned by MultiCreateMeetingsV1Response.Validate if the designated
// constraints aren't met.
type MultiCreateMeetingsV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultiCreateMeetingsV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultiCreateMeetingsV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultiCreateMeetingsV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultiCreateMeetingsV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultiCreateMeetingsV1ResponseValidationError) ErrorName() string {
	return "MultiCreateMeetingsV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MultiCreateMeetingsV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultiCreateMeetingsV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultiCreateMeetingsV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultiCreateMeetingsV1ResponseValidationError{}

// Validate checks the field values on CreateMeetingV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateMeetingV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetMeeting()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateMeetingV1RequestValidationError{
				field:  "Meeting",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateMeetingV1RequestValidationError is the validation error returned by
// CreateMeetingV1Request.Validate if the designated constraints aren't met.
type CreateMeetingV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMeetingV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMeetingV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMeetingV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMeetingV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMeetingV1RequestValidationError) ErrorName() string {
	return "CreateMeetingV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMeetingV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMeetingV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMeetingV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMeetingV1RequestValidationError{}

// Validate checks the field values on CreateMeetingV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateMeetingV1Response) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for MeetingId

	return nil
}

// CreateMeetingV1ResponseValidationError is the validation error returned by
// CreateMeetingV1Response.Validate if the designated constraints aren't met.
type CreateMeetingV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMeetingV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMeetingV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMeetingV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMeetingV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMeetingV1ResponseValidationError) ErrorName() string {
	return "CreateMeetingV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMeetingV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMeetingV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMeetingV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMeetingV1ResponseValidationError{}

// Validate checks the field values on DescribeMeetingV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribeMeetingV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetMeetingId() <= 0 {
		return DescribeMeetingV1RequestValidationError{
			field:  "MeetingId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// DescribeMeetingV1RequestValidationError is the validation error returned by
// DescribeMeetingV1Request.Validate if the designated constraints aren't met.
type DescribeMeetingV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeMeetingV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeMeetingV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeMeetingV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeMeetingV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeMeetingV1RequestValidationError) ErrorName() string {
	return "DescribeMeetingV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeMeetingV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeMeetingV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeMeetingV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeMeetingV1RequestValidationError{}

// Validate checks the field values on DescribeMeetingV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribeMeetingV1Response) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetMeeting()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribeMeetingV1ResponseValidationError{
				field:  "Meeting",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DescribeMeetingV1ResponseValidationError is the validation error returned by
// DescribeMeetingV1Response.Validate if the designated constraints aren't met.
type DescribeMeetingV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeMeetingV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeMeetingV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeMeetingV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeMeetingV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeMeetingV1ResponseValidationError) ErrorName() string {
	return "DescribeMeetingV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeMeetingV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeMeetingV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeMeetingV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeMeetingV1ResponseValidationError{}

// Validate checks the field values on ListMeetingV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListMeetingV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetLimit() <= 0 {
		return ListMeetingV1RequestValidationError{
			field:  "Limit",
			reason: "value must be greater than 0",
		}
	}

	if m.GetOffset() <= 0 {
		return ListMeetingV1RequestValidationError{
			field:  "Offset",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// ListMeetingV1RequestValidationError is the validation error returned by
// ListMeetingV1Request.Validate if the designated constraints aren't met.
type ListMeetingV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMeetingV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMeetingV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMeetingV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMeetingV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMeetingV1RequestValidationError) ErrorName() string {
	return "ListMeetingV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListMeetingV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMeetingV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMeetingV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMeetingV1RequestValidationError{}

// Validate checks the field values on ListMeetingV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListMeetingV1Response) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetMeetings() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListMeetingV1ResponseValidationError{
					field:  fmt.Sprintf("Meetings[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListMeetingV1ResponseValidationError is the validation error returned by
// ListMeetingV1Response.Validate if the designated constraints aren't met.
type ListMeetingV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListMeetingV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListMeetingV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListMeetingV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListMeetingV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListMeetingV1ResponseValidationError) ErrorName() string {
	return "ListMeetingV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListMeetingV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListMeetingV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListMeetingV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListMeetingV1ResponseValidationError{}

// Validate checks the field values on UpdateMeetingV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateMeetingV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetMeeting()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateMeetingV1RequestValidationError{
				field:  "Meeting",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateMeetingV1RequestValidationError is the validation error returned by
// UpdateMeetingV1Request.Validate if the designated constraints aren't met.
type UpdateMeetingV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMeetingV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMeetingV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMeetingV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMeetingV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMeetingV1RequestValidationError) ErrorName() string {
	return "UpdateMeetingV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMeetingV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMeetingV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMeetingV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMeetingV1RequestValidationError{}

// Validate checks the field values on UpdateMeetingV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateMeetingV1Response) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// UpdateMeetingV1ResponseValidationError is the validation error returned by
// UpdateMeetingV1Response.Validate if the designated constraints aren't met.
type UpdateMeetingV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMeetingV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMeetingV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMeetingV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMeetingV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMeetingV1ResponseValidationError) ErrorName() string {
	return "UpdateMeetingV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMeetingV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMeetingV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMeetingV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMeetingV1ResponseValidationError{}

// Validate checks the field values on RemoveMeetingV1Request with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveMeetingV1Request) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetMeetingId() <= 0 {
		return RemoveMeetingV1RequestValidationError{
			field:  "MeetingId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// RemoveMeetingV1RequestValidationError is the validation error returned by
// RemoveMeetingV1Request.Validate if the designated constraints aren't met.
type RemoveMeetingV1RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveMeetingV1RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveMeetingV1RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveMeetingV1RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveMeetingV1RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveMeetingV1RequestValidationError) ErrorName() string {
	return "RemoveMeetingV1RequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveMeetingV1RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveMeetingV1Request.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveMeetingV1RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveMeetingV1RequestValidationError{}

// Validate checks the field values on RemoveMeetingV1Response with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveMeetingV1Response) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// RemoveMeetingV1ResponseValidationError is the validation error returned by
// RemoveMeetingV1Response.Validate if the designated constraints aren't met.
type RemoveMeetingV1ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveMeetingV1ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveMeetingV1ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveMeetingV1ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveMeetingV1ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveMeetingV1ResponseValidationError) ErrorName() string {
	return "RemoveMeetingV1ResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveMeetingV1ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveMeetingV1Response.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveMeetingV1ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveMeetingV1ResponseValidationError{}
