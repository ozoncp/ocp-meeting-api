// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ocp_meeting_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OcpMeetingApiClient is the client API for OcpMeetingApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OcpMeetingApiClient interface {
	CreateMeetingV1(ctx context.Context, in *CreateMeetingV1Request, opts ...grpc.CallOption) (*CreateMeetingV1Response, error)
	DescribeMeetingV1(ctx context.Context, in *DescribeMeetingV1Request, opts ...grpc.CallOption) (*DescribeMeetingV1Response, error)
	ListMeetingV1(ctx context.Context, in *ListMeetingV1Request, opts ...grpc.CallOption) (*ListMeetingV1Response, error)
	UpdateMeetingV1(ctx context.Context, in *UpdateMeetingV1Request, opts ...grpc.CallOption) (*UpdateMeetingV1Response, error)
	RemoveMeetingV1(ctx context.Context, in *RemoveMeetingV1Request, opts ...grpc.CallOption) (*RemoveMeetingV1Response, error)
}

type ocpMeetingApiClient struct {
	cc grpc.ClientConnInterface
}

func NewOcpMeetingApiClient(cc grpc.ClientConnInterface) OcpMeetingApiClient {
	return &ocpMeetingApiClient{cc}
}

func (c *ocpMeetingApiClient) CreateMeetingV1(ctx context.Context, in *CreateMeetingV1Request, opts ...grpc.CallOption) (*CreateMeetingV1Response, error) {
	out := new(CreateMeetingV1Response)
	err := c.cc.Invoke(ctx, "/ocp.meeting.api.OcpMeetingApi/CreateMeetingV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpMeetingApiClient) DescribeMeetingV1(ctx context.Context, in *DescribeMeetingV1Request, opts ...grpc.CallOption) (*DescribeMeetingV1Response, error) {
	out := new(DescribeMeetingV1Response)
	err := c.cc.Invoke(ctx, "/ocp.meeting.api.OcpMeetingApi/DescribeMeetingV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpMeetingApiClient) ListMeetingV1(ctx context.Context, in *ListMeetingV1Request, opts ...grpc.CallOption) (*ListMeetingV1Response, error) {
	out := new(ListMeetingV1Response)
	err := c.cc.Invoke(ctx, "/ocp.meeting.api.OcpMeetingApi/ListMeetingV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpMeetingApiClient) UpdateMeetingV1(ctx context.Context, in *UpdateMeetingV1Request, opts ...grpc.CallOption) (*UpdateMeetingV1Response, error) {
	out := new(UpdateMeetingV1Response)
	err := c.cc.Invoke(ctx, "/ocp.meeting.api.OcpMeetingApi/UpdateMeetingV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpMeetingApiClient) RemoveMeetingV1(ctx context.Context, in *RemoveMeetingV1Request, opts ...grpc.CallOption) (*RemoveMeetingV1Response, error) {
	out := new(RemoveMeetingV1Response)
	err := c.cc.Invoke(ctx, "/ocp.meeting.api.OcpMeetingApi/RemoveMeetingV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OcpMeetingApiServer is the server API for OcpMeetingApi service.
// All implementations must embed UnimplementedOcpMeetingApiServer
// for forward compatibility
type OcpMeetingApiServer interface {
	CreateMeetingV1(context.Context, *CreateMeetingV1Request) (*CreateMeetingV1Response, error)
	DescribeMeetingV1(context.Context, *DescribeMeetingV1Request) (*DescribeMeetingV1Response, error)
	ListMeetingV1(context.Context, *ListMeetingV1Request) (*ListMeetingV1Response, error)
	UpdateMeetingV1(context.Context, *UpdateMeetingV1Request) (*UpdateMeetingV1Response, error)
	RemoveMeetingV1(context.Context, *RemoveMeetingV1Request) (*RemoveMeetingV1Response, error)
	mustEmbedUnimplementedOcpMeetingApiServer()
}

// UnimplementedOcpMeetingApiServer must be embedded to have forward compatible implementations.
type UnimplementedOcpMeetingApiServer struct {
}

func (UnimplementedOcpMeetingApiServer) CreateMeetingV1(context.Context, *CreateMeetingV1Request) (*CreateMeetingV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMeetingV1 not implemented")
}
func (UnimplementedOcpMeetingApiServer) DescribeMeetingV1(context.Context, *DescribeMeetingV1Request) (*DescribeMeetingV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeMeetingV1 not implemented")
}
func (UnimplementedOcpMeetingApiServer) ListMeetingV1(context.Context, *ListMeetingV1Request) (*ListMeetingV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMeetingV1 not implemented")
}
func (UnimplementedOcpMeetingApiServer) UpdateMeetingV1(context.Context, *UpdateMeetingV1Request) (*UpdateMeetingV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMeetingV1 not implemented")
}
func (UnimplementedOcpMeetingApiServer) RemoveMeetingV1(context.Context, *RemoveMeetingV1Request) (*RemoveMeetingV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveMeetingV1 not implemented")
}
func (UnimplementedOcpMeetingApiServer) mustEmbedUnimplementedOcpMeetingApiServer() {}

// UnsafeOcpMeetingApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OcpMeetingApiServer will
// result in compilation errors.
type UnsafeOcpMeetingApiServer interface {
	mustEmbedUnimplementedOcpMeetingApiServer()
}

func RegisterOcpMeetingApiServer(s grpc.ServiceRegistrar, srv OcpMeetingApiServer) {
	s.RegisterService(&OcpMeetingApi_ServiceDesc, srv)
}

func _OcpMeetingApi_CreateMeetingV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMeetingV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpMeetingApiServer).CreateMeetingV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.meeting.api.OcpMeetingApi/CreateMeetingV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpMeetingApiServer).CreateMeetingV1(ctx, req.(*CreateMeetingV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpMeetingApi_DescribeMeetingV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeMeetingV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpMeetingApiServer).DescribeMeetingV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.meeting.api.OcpMeetingApi/DescribeMeetingV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpMeetingApiServer).DescribeMeetingV1(ctx, req.(*DescribeMeetingV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpMeetingApi_ListMeetingV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMeetingV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpMeetingApiServer).ListMeetingV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.meeting.api.OcpMeetingApi/ListMeetingV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpMeetingApiServer).ListMeetingV1(ctx, req.(*ListMeetingV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpMeetingApi_UpdateMeetingV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMeetingV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpMeetingApiServer).UpdateMeetingV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.meeting.api.OcpMeetingApi/UpdateMeetingV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpMeetingApiServer).UpdateMeetingV1(ctx, req.(*UpdateMeetingV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpMeetingApi_RemoveMeetingV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveMeetingV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpMeetingApiServer).RemoveMeetingV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.meeting.api.OcpMeetingApi/RemoveMeetingV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpMeetingApiServer).RemoveMeetingV1(ctx, req.(*RemoveMeetingV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

// OcpMeetingApi_ServiceDesc is the grpc.ServiceDesc for OcpMeetingApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OcpMeetingApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ocp.meeting.api.OcpMeetingApi",
	HandlerType: (*OcpMeetingApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMeetingV1",
			Handler:    _OcpMeetingApi_CreateMeetingV1_Handler,
		},
		{
			MethodName: "DescribeMeetingV1",
			Handler:    _OcpMeetingApi_DescribeMeetingV1_Handler,
		},
		{
			MethodName: "ListMeetingV1",
			Handler:    _OcpMeetingApi_ListMeetingV1_Handler,
		},
		{
			MethodName: "UpdateMeetingV1",
			Handler:    _OcpMeetingApi_UpdateMeetingV1_Handler,
		},
		{
			MethodName: "RemoveMeetingV1",
			Handler:    _OcpMeetingApi_RemoveMeetingV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/ocp-meeting-api/ocp-meeting-api.proto",
}
